import telebot
import sqlite3
import datetime
import requests
import os
from flask import Flask, request
from telebot import types

# --- ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ рждржерзНржп ржПржмржВ ржкрж░рж┐ржмрзЗрж╢ ржерзЗржХрзЗ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ---
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8266303588:AAHICu6OCrlJhTfSCIECli0RDtvRAmUeAgc")
CHANNEL_ID = os.environ.get("CHANNEL_ID", "@MrTools_BD")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS", "2003008418, 1875687264")
ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',')]
SMS_API_URL = os.environ.get("SMS_API_URL", "http://209.145.55.60:8000/send")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL") "https://sms-bot-production.up.railway.app/"

# --- ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзЗржЯржЖржк ---
conn = sqlite3.connect('sms_bot.db', check_same_thread=False)
cursor = conn.cursor()

def setup_database():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY, sms_sent INTEGER DEFAULT 0,
        last_sms_date TEXT, bonus_sms INTEGER DEFAULT 0
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sms_log (
        log_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER,
        phone_number TEXT, timestamp TEXT
    )''')
    conn.commit()

setup_database()
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- рж╕рж╣рж╛рзЯржХ ржлрж╛ржВрж╢ржи ---
def is_admin(user_id):
    return user_id in ADMIN_IDS

def is_channel_member(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

# --- ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи (Keyboard) рждрзИрж░рж┐рж░ ржлрж╛ржВрж╢ржи ---
def main_menu_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("ЁЯУЬ ржЖржорж╛рж░ History", callback_data="history_page_1")
    btn2 = types.InlineKeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ", callback_data="get_referral")
    keyboard.add(btn1, btn2)
    if is_admin(user_id):
        btn3 = types.InlineKeyboardButton("ЁЯФС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓", callback_data="admin_menu")
        keyboard.add(btn3)
    return keyboard

def admin_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("ЁЯУК ржмржЯ Stats", callback_data="show_stats")
    btn2 = types.InlineKeyboardButton("ЁЯТ╛ ржмрзНржпрж╛ржХржЖржк", callback_data="get_backup")
    btn3 = types.InlineKeyboardButton("ЁЯОБ ржмрзЛржирж╛рж╕ ржжрж┐ржи", callback_data="prompt_set_bonus")
    btn4 = types.InlineKeyboardButton("ЁЯЧТя╕П ржЗржЙржЬрж╛рж░рзЗрж░ рж▓ржЧ", callback_data="prompt_user_sms")
    btn5 = types.InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")
    keyboard.add(btn1, btn2, btn3, btn4, btn5)
    return keyboard

# --- ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, last_sms_date) VALUES (?, ?)", (user_id, str(datetime.date.today())))
        conn.commit()

    # рж░рзЗржлрж╛рж░рзЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
    parts = message.text.split()
    if len(parts) > 1:
        try:
            referrer_id = int(parts[1])
            if referrer_id != user_id:
                cursor.execute("UPDATE users SET bonus_sms = bonus_sms + 3 WHERE user_id = ?", (referrer_id,))
                conn.commit()
                bot.send_message(referrer_id, "ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХрзЗ ржПржХржЬржи ржирждрзБржи рж╕ржжрж╕рзНржп ржпрзЛржЧ ржжрж┐рзЯрзЗржЫрзЗржиред ржЖржкржирж┐ рзйржЯрж┐ ржмрзЛржирж╛рж╕ SMS ржкрзЗрзЯрзЗржЫрзЗржиред")
        except (IndexError, ValueError):
            pass

    welcome_text = "рж╕рзНржмрж╛ржЧрждржо!\n\nтЮбя╕П SMS ржкрж╛ржарж╛рждрзЗ, ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:\n`/sms <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>`\n\nржЕржирзНржпрж╛ржирзНржп ржЕржкрж╢ржирзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ЁЯСЗ"
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu_keyboard(user_id))

# --- ржорзВрж▓ SMS ржкрж╛ржарж╛ржирзЛрж░ ржХржорж╛ржирзНржб ---
@bot.message_handler(commands=['sms'])
def sms_command(message):
    user_id = message.from_user.id
    if not is_channel_member(user_id):
        bot.reply_to(message, f"ржПржЗ рж╕рзБржмрж┐ржзрж╛ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи: {CHANNEL_ID}")
        return

    try:
        _, phone_number, sms_text = message.text.split(maxsplit=2)
    except ValueError:
        bot.reply_to(message, "тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред\nрж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: `/sms <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>`")
        return
    
    # ржЗржЙржЬрж╛рж░ рж▓рж┐ржорж┐ржЯ ржЪрзЗржХ ржХрж░рж╛ (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
    # ... (ржПржЗ ржЕржВрж╢ржЯрж┐ рж╕ржВржХрзНрж╖рж┐ржкрзНрждрждрж╛рж░ ржЬржирзНржп ржжрзЗржЦрж╛ржирзЛ рж╣рж▓рзЛ ржирж╛, ржПржЯрж┐ ржЙржкрж░рзЗрж░ ржХрзЛржбрзЗрж░ ржорждрзЛржЗ)
    
    # --- SMS API ржХрж▓ ---
    try:
        response = requests.get(SMS_API_URL, params={'number': phone_number, 'sms': sms_text})
        if response.status_code == 200:
            # ржбрж╛ржЯрж╛ржмрзЗрж╕ ржЖржкржбрзЗржЯ (ржЖржЧрзЗрж░ ржорждрзЛржЗ)
            # ...
            bot.reply_to(message, f"тЬЕ '{phone_number}' ржиржорзНржмрж░рзЗ ржЖржкржирж╛рж░ SMS рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржЕржирзБрж░рзЛржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        else:
            bot.reply_to(message, f"API ржерзЗржХрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржХрзЛржб: {response.status_code}")
    except requests.exceptions.RequestException as e:
        bot.reply_to(message, "API рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред")


# --- ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХрзЗрж░ ржЙрждрзНрждрж░ (Callback Query Handler) ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    
    # Main Menu
    if call.data == "main_menu":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="ржорзВрж▓ ржорзЗржирзБ:",
            reply_markup=main_menu_keyboard(user_id)
        )

    # Referral Link
    elif call.data == "get_referral":
        bot_info = bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start={user_id}"
        bot.answer_callback_query(call.id, text=f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n{referral_link}", show_alert=True)

    # History
    elif call.data.startswith("history_page_"):
        page = int(call.data.split('_')[2])
        per_page = 5
        offset = (page - 1) * per_page
        
        cursor.execute("SELECT phone_number, timestamp FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT ? OFFSET ?", (user_id, per_page, offset))
        logs = cursor.fetchall()
        cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (user_id,))
        total_logs = cursor.fetchone()[0]
        total_pages = (total_logs + per_page - 1) // per_page

        if not logs:
            bot.answer_callback_query(call.id, "ржЖржкржирж╛рж░ ржХрзЛржирзЛ SMS ржкрж╛ржарж╛ржирзЛрж░ ржЗрждрж┐рж╣рж╛рж╕ ржирзЗржЗред", show_alert=True)
            return

        history_text = f"ЁЯУЬ **ржЖржкржирж╛рж░ SMS History** (ржкрзЗржЬ: {page}/{total_pages})\n\n"
        for log in logs:
            dt_obj = datetime.datetime.fromisoformat(log[1])
            history_text += f"ЁЯУЮ ржиржорзНржмрж░: `{log[0]}`\nЁЯЧУя╕П рж╕ржорзЯ: {dt_obj.strftime('%Y-%m-%d %H:%M')}\n---\n"
            
        # History ржирзЗржнрж┐ржЧрзЗрж╢ржи ржмрж╛ржЯржи
        keyboard = types.InlineKeyboardMarkup()
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("тмЕя╕П ржЖржЧрзЗрж░", callback_data=f"history_page_{page-1}"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("ржкрж░рзЗрж░ тЮбя╕П", callback_data=f"history_page_{page+1}"))
        keyboard.add(*row)
        keyboard.add(types.InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=history_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    # Admin Menu
    elif call.data == "admin_menu":
        if not is_admin(user_id): return
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="ЁЯФС **ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓**",
            reply_markup=admin_menu_keyboard(),
            parse_mode="Markdown"
        )

    # Stats
    elif call.data == "show_stats" or call.data == "refresh_stats":
        if not is_admin(user_id): return
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM sms_log")
        total_sms = cursor.fetchone()[0]
        today = str(datetime.date.today())
        cursor.execute("SELECT COUNT(*) FROM sms_log WHERE DATE(timestamp) = ?", (today,))
        today_sms = cursor.fetchone()[0]
        stats_text = f"ЁЯУК **ржмржЯ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи**\n\n" \
                     f"ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж ржорзЛржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: {total_users}\n" \
                     f"ЁЯУд ржорзЛржЯ ржкрж╛ржарж╛ржирзЛ SMS: {total_sms}\n" \
                     f"ЁЯУИ ржЖржЬ ржкрж╛ржарж╛ржирзЛ SMS: {today_sms}"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("ЁЯФД рж░рж┐ржлрзНрж░рзЗрж╢", callback_data="refresh_stats"))
        keyboard.add(types.InlineKeyboardButton("ЁЯФЩ ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗржирзБ", callback_data="admin_menu"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=stats_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    # Backup
    elif call.data == "get_backup":
        if not is_admin(user_id): return
        try:
            with open('sms_bot.db', 'rb') as db_file:
                bot.send_document(call.message.chat.id, db_file, caption="ржбрж╛ржЯрж╛ржмрзЗрж╕ ржмрзНржпрж╛ржХржЖржк")
            bot.answer_callback_query(call.id, "ржмрзНржпрж╛ржХржЖржк ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            bot.answer_callback_query(call.id, f"рждрзНрж░рзБржЯрж┐: {e}", show_alert=True)
    
    # ржЕржирзНржпрж╛ржирзНржп ржЕрзНржпрж╛ржбржорж┐ржи ржЕржкрж╢ржирзЗрж░ ржЬржирзНржп ржЗржЙржЬрж╛рж░ржХрзЗ ржЗржиржкрзБржЯ ржжрж┐рждрзЗ ржмрж▓рж╛
    # ... (ржПржЦрж╛ржирзЗ /setlimit ржПржмржВ /usersms ржПрж░ ржЬржирзНржп ржХрзЛржб ржпрзБржХрзНржд рж╣ржмрзЗ)


# --- Flask Webhook рж╕рзЗржЯржЖржк ---
@app.route('/' + BOT_TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL + '/' + BOT_TOKEN)
    return "Webhook set successfully!", 200

if __name__ == "__main__":
    setup_database()
    # Railway.app ржП gunicorn ржПржЯрж┐ ржЪрж╛рж▓рж╛ржмрзЗ, рж╕рж░рж╛рж╕рж░рж┐ ржирзЯ
    # app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
