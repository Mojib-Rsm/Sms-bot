import telebot
import sqlite3
import datetime
import requests
import os
import sys
from flask import Flask, request
from telebot import types

# --- Environment Variables from Railway ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS")
SMS_API_URL = os.environ.get("SMS_API_URL")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# --- Essential Variable Check ---
if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_IDS_STR, SMS_API_URL, WEBHOOK_URL]):
    print("FATAL ERROR: A required variable was not found in Railway's 'Variables' tab. Please check for typos or missing variables.", file=sys.stderr)
    raise ValueError("Error: One or more required environment variables are not set in Railway.")

ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',')]

# --- Database Setup (Updated Schema) ---
conn = sqlite3.connect('sms_bot.db', check_same_thread=False)
cursor = conn.cursor()

def setup_database():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT,
        sms_sent INTEGER DEFAULT 0,
        last_sms_date TEXT,
        bonus_sms INTEGER DEFAULT 0,
        temp_admin_action TEXT,
        current_action TEXT,
        temp_data TEXT
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sms_log (
        log_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        phone_number TEXT,
        message TEXT,
        timestamp TEXT
    )''')
    conn.commit()

setup_database()
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- Helper Functions ---
def is_admin(user_id):
    return user_id in ADMIN_IDS

def is_channel_member(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

def alert_admins(message, is_error=False):
    prefix = "‚ö†Ô∏è **SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶è‡¶∞‡¶∞ ‡¶≤‡¶ó** ‚ö†Ô∏è\n\n" if is_error else "üîî **‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®** üîî\n\n"
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, prefix + message, parse_mode="Markdown")
        except Exception as e:
            print(f"Failed to send notification to admin {admin_id}: {e}")

# --- Dynamic Command Menu ---
def set_user_commands(user_id):
    user_commands = [
        types.BotCommand("start", "‚ñ∂Ô∏è ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ/‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"),
        types.BotCommand("sms", "üí¨ <‡¶®‡¶Æ‡ßç‡¶¨‡¶∞> <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú> - SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®"),
        types.BotCommand("profile", "üë§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏"),
        types.BotCommand("history", "üìú ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã SMS-‡¶è‡¶∞ ‡¶≤‡¶ó"),
        types.BotCommand("referral", "üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï"),
        types.BotCommand("help", "‚ùì ‡¶∏‡¶ï‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
    ]
    if is_admin(user_id):
        admin_commands = [
            types.BotCommand("admin", "üîë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"),
            types.BotCommand("stats", "üìä ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®")
        ]
        user_commands.extend(admin_commands)
    bot.set_my_commands(commands=user_commands, scope=types.BotCommandScopeChat(user_id))

# --- Keyboard Markup Functions ---
def main_menu_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn_send = types.InlineKeyboardButton("üí¨ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®", callback_data="send_message_start")
    btn1 = types.InlineKeyboardButton("üë§ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤", callback_data="show_profile")
    btn2 = types.InlineKeyboardButton("üìú ‡¶Ü‡¶Æ‡¶æ‡¶∞ History", callback_data="history_page_1")
    btn4 = types.InlineKeyboardButton("üîó ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï", callback_data="get_referral")
    btn5 = types.InlineKeyboardButton("‚ùì ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ", callback_data="show_help")
    keyboard.add(btn_send)
    keyboard.add(btn1, btn2, btn4, btn5)
    if is_admin(user_id):
        btn6 = types.InlineKeyboardButton("üîë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", callback_data="admin_menu")
        keyboard.add(btn6)
    return keyboard

def force_join_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    try:
        channel_link = bot.export_chat_invite_link(CHANNEL_ID)
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®", url=channel_link)
    except Exception:
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")
    keyboard.add(url_button)
    return keyboard

def admin_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton("üìä ‡¶¨‡¶ü Stats", callback_data="show_stats"), types.InlineKeyboardButton("üë• ‡¶∏‡¶¨ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", callback_data="userlist_page_1"))
    keyboard.add(types.InlineKeyboardButton("üéÅ ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶¶‡¶ø‡¶®", callback_data="prompt_set_bonus"), types.InlineKeyboardButton("üóíÔ∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≤‡¶ó", callback_data="prompt_user_sms"))
    keyboard.add(types.InlineKeyboardButton("üíæ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™", callback_data="get_backup"))
    keyboard.add(types.InlineKeyboardButton("üîô ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="main_menu"))
    return keyboard

def back_to_main_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="main_menu"))
    return keyboard

# --- Command & Logic Handlers ---
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    user = message.from_user
    set_user_commands(user_id)
    if not is_channel_member(user_id):
        bot.send_message(message.chat.id, "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§‡§Æ‡•ç!\n\n‡¶è‡¶á ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§", reply_markup=force_join_keyboard())
        return
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    is_old_user = cursor.fetchone()
    if not is_old_user:
        cursor.execute("INSERT INTO users (user_id, first_name, username, last_sms_date) VALUES (?, ?, ?, ?)", (user_id, user.first_name, user.username, str(datetime.date.today())))
        conn.commit()
        notification_message = f"**‡¶®‡¶æ‡¶Æ:** {user.first_name}\n**‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ:** @{user.username}\n**‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:** `{user_id}`\n‡¶¨‡¶ü‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§"
        alert_admins(notification_message)
    else:
        cursor.execute("UPDATE users SET first_name = ?, username = ? WHERE user_id = ?", (user.first_name, user.username, user_id))
        conn.commit()
    parts = message.text.split()
    if len(parts) > 1:
        try:
            referrer_id = int(parts[1])
            if referrer_id != user_id:
                cursor.execute("UPDATE users SET bonus_sms = bonus_sms + 3 WHERE user_id = ?", (referrer_id,))
                conn.commit()
                bot.send_message(referrer_id, "‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡ß©‡¶ü‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ SMS ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§")
        except (IndexError, ValueError):
            pass
    welcome_text = "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! üéâ\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§"
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu_keyboard(user_id))

@bot.message_handler(commands=['sms'])
def sms_command(message):
    user_id = message.from_user.id
    if not is_channel_member(user_id):
        bot.reply_to(message, "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®‡•§", reply_markup=force_join_keyboard())
        return
    try:
        _, phone_number, sms_text = message.text.split(maxsplit=2)
    except ValueError:
        bot.reply_to(message, "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡•§\n‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: `/sms <‡¶®‡¶Æ‡ßç‡¶¨‡¶∞> <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú>`")
        return
    cursor.execute("SELECT sms_sent, last_sms_date, bonus_sms FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    today = str(datetime.date.today())
    if not user_data:
        cursor.execute("INSERT INTO users (user_id, last_sms_date) VALUES (?, ?)", (user_id, today))
        conn.commit()
        sms_sent, bonus_sms = 0, 0
    else:
        if user_data[1] != today:
            cursor.execute("UPDATE users SET sms_sent = 0, last_sms_date = ? WHERE user_id = ?", (today, user_id))
            conn.commit()
            sms_sent = 0
        else: sms_sent = user_data[0]
        bonus_sms = user_data[2]
    total_limit = 10 + bonus_sms
    if sms_sent >= total_limit:
        bot.reply_to(message, f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡ßÄ‡¶Æ‡¶æ ({total_limit} ‡¶ü‡¶ø) ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
        return
    cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ? AND phone_number = ? AND DATE(timestamp) = ?", (user_id, phone_number, today))
    same_number_count = cursor.fetchone()[0]
    if same_number_count >= 4:
        bot.reply_to(message, "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶¶‡¶ø‡¶®‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß™‡¶ü‡¶ø SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")
        return
    try:
        response = requests.get(SMS_API_URL, params={'number': phone_number, 'sms': sms_text}, timeout=30)
        if response.status_code == 200:
            cursor.execute("UPDATE users SET sms_sent = sms_sent + 1 WHERE user_id = ?", (user_id,))
            cursor.execute("INSERT INTO sms_log (user_id, phone_number, message, timestamp) VALUES (?, ?, ?, ?)", (user_id, phone_number, sms_text, datetime.datetime.now().isoformat()))
            conn.commit()
            bot.reply_to(message, f"‚úÖ '{phone_number}' ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ SMS ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        else:
            bot.reply_to(message, f"SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§ API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            error_details = f"**‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ:** {message.from_user.first_name} (`{user_id}`)\n**‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:** `{phone_number}`\n**‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°:** `{response.status_code}`\n**API ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏:** `{response.text}`"
            alert_admins(error_details, is_error=True)
    except requests.exceptions.RequestException as e:
        bot.reply_to(message, "SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§ API ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§")
        error_details = f"**‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ:** {message.from_user.first_name} (`{user_id}`)\n**‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:** `{phone_number}`\n**‡¶è‡¶∞‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™:** Connection Error\n**‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§:** `{str(e)}`"
        alert_admins(error_details, is_error=True)

@bot.message_handler(commands=['help'])
def help_command(message):
    # (Implementation is the same as the previous complete version)
    pass
    
# --- Stateful Message Handler ---
@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def handle_stateful_messages(message):
    user_id = message.from_user.id
    cursor.execute("SELECT current_action, temp_data FROM users WHERE user_id = ?", (user_id,))
    state_data = cursor.fetchone()
    if state_data and state_data[0]:
        action = state_data[0]
        if action == 'awaiting_number':
            phone_number = message.text.strip()
            if not phone_number.isdigit() or len(phone_number) < 10:
                bot.reply_to(message, "‚ùå ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßü‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                return
            cursor.execute("UPDATE users SET current_action = 'awaiting_message', temp_data = ? WHERE user_id = ?", (phone_number, user_id))
            conn.commit()
            bot.reply_to(message, f"‚úÖ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ `({phone_number})` ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", parse_mode="Markdown")
        elif action == 'awaiting_message':
            sms_text = message.text
            phone_number = state_data[1]
            cursor.execute("UPDATE users SET current_action = NULL, temp_data = NULL WHERE user_id = ?", (user_id,))
            conn.commit()
            # Create a fake message object to pass to the sms_command
            fake_message = types.Message(message_id=0, from_user=message.from_user, date=message.date, chat=message.chat, content_type='text', options={}, json_string="")
            fake_message.text = f"/sms {phone_number} {sms_text}"
            sms_command(fake_message)
    else:
        handle_admin_input(message)

def handle_admin_input(message):
    user_id = message.from_user.id
    cursor.execute("SELECT temp_admin_action FROM users WHERE user_id = ?", (user_id,))
    action_data = cursor.fetchone()
    if not action_data or not action_data[0]: return
    action_type = action_data[0]
    cursor.execute("UPDATE users SET temp_admin_action = NULL WHERE user_id = ?", (user_id,))
    conn.commit()
    if action_type == "set_bonus":
        try:
            target_user_id, bonus_amount = map(int, message.text.split())
            cursor.execute("UPDATE users SET bonus_sms = bonus_sms + ? WHERE user_id = ?", (bonus_amount, target_user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"‚úÖ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {target_user_id} ‡¶ï‡ßá {bonus_amount}‡¶ü‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ SMS ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            bot.send_message(target_user_id, f"üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá {bonus_amount}‡¶ü‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ SMS ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§")
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    elif action_type == "get_user_sms":
        try:
            target_user_id = int(message.text)
            cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (target_user_id,))
            total_sms_sent = cursor.fetchone()[0]
            cursor.execute("SELECT phone_number, timestamp FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT 20", (target_user_id,))
            logs = cursor.fetchall()
            if not logs:
                bot.send_message(message.chat.id, f"‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {target_user_id} ‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶ó ‡¶®‡ßá‡¶á‡•§")
                return
            log_text = f"üìú **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {target_user_id} ‡¶è‡¶∞ SMS ‡¶≤‡¶ó:**\n\nüìä **‡¶Æ‡ßã‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã SMS:** {total_sms_sent} ‡¶ü‡¶ø\n-------------------------------------\n\n"
            for log in logs:
                dt_obj = datetime.datetime.fromisoformat(log[1])
                formatted_time = dt_obj.strftime('%Y-%m-%d %H:%M')
                log_text += f"üìû **‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:** `{log[0]}`\nüóìÔ∏è **‡¶∏‡¶Æ‡ßü:** {formatted_time}\n---\n"
            bot.send_message(message.chat.id, log_text, parse_mode="Markdown")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# --- Callback Query Handler (Fully Implemented) ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    action = call.data
    message = call.message
    if not is_channel_member(user_id):
        bot.answer_callback_query(call.id, "‡¶è‡¶á ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®‡•§", show_alert=True)
        return
    if action == "main_menu":
        bot.edit_message_text("‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ:", message.chat.id, message.message_id, reply_markup=main_menu_keyboard(user_id))
    elif action == "show_profile":
        cursor.execute("SELECT sms_sent, last_sms_date, bonus_sms FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        sms_sent_today = user_data[0] if user_data and user_data[1] == str(datetime.date.today()) else 0
        bonus_sms = user_data[2] if user_data else 0
        daily_limit = 10
        remaining_sms = (daily_limit - sms_sent_today) + bonus_sms
        cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (user_id,))
        total_sent_ever = cursor.fetchone()[0]
        profile_text = f"üë§ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤**\n\nüîπ **‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü:**\n   - ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§: {sms_sent_today} ‡¶ü‡¶ø\n   - ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Ü‡¶õ‡ßá: {daily_limit - sms_sent_today} ‡¶ü‡¶ø\n\nüî∏ **‡¶¨‡ßã‡¶®‡¶æ‡¶∏:** {bonus_sms} ‡¶ü‡¶ø SMS\n\n‚úÖ **‡¶Ü‡¶ú ‡¶Æ‡ßã‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®:** {remaining_sms} ‡¶ü‡¶ø\n\nüìà **‡¶≤‡¶æ‡¶á‡¶´‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®:**\n   - ‡¶Æ‡ßã‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã SMS: {total_sent_ever} ‡¶ü‡¶ø"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîÑ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂", callback_data="show_profile"))
        keyboard.add(types.InlineKeyboardButton("üîô ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="main_menu"))
        bot.edit_message_text(profile_text, message.chat.id, message.message_id, parse_mode="Markdown", reply_markup=keyboard)
    elif action.startswith("history_page_"):
        page = int(action.split('_')[2])
        per_page = 10
        offset = (page - 1) * per_page
        cursor.execute("SELECT phone_number, timestamp FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT ? OFFSET ?", (user_id, per_page, offset))
        logs = cursor.fetchall()
        cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (user_id,))
        total_logs = cursor.fetchone()[0]
        total_pages = (total_logs + per_page - 1) // per_page or 1
        if not logs:
            bot.answer_callback_query(call.id, "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶®‡ßá‡¶á‡•§", show_alert=True)
            return
        history_text = f"üìú **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ SMS History** (‡¶™‡ßá‡¶ú: {page}/{total_pages})\n\n"
        for log in logs:
            dt_obj = datetime.datetime.fromisoformat(log[1])
            history_text += f"üìû ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: `{log[0]}`\nüóìÔ∏è ‡¶∏‡¶Æ‡ßü: {dt_obj.strftime('%Y-%m-%d %H:%M')}\n---\n"
        row = []
        keyboard = types.InlineKeyboardMarkup()
        if page > 1: row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è ‡¶Ü‡¶ó‡ßá‡¶∞", callback_data=f"history_page_{page-1}"))
        if page < total_pages: row.append(types.InlineKeyboardButton("‡¶™‡¶∞‡ßá‡¶∞ ‚û°Ô∏è", callback_data=f"history_page_{page+1}"))
        keyboard.add(*row)
        keyboard.add(types.InlineKeyboardButton("üîô ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="main_menu"))
        bot.edit_message_text(history_text, message.chat.id, message.message_id, reply_markup=keyboard, parse_mode="Markdown")
    elif action == "show_help":
        help_text = "‚ùì **‡¶∏‡¶π‡¶æ‡ßü‡¶§‡¶æ ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞**\n\n‡¶è‡¶á ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\n**‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ SMS ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®?**\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶¨‡¶æ ‡¶Ü‡¶∞‡¶ì ‡¶¨‡ßá‡¶∂‡¶ø SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\nüë®‚Äçüíº **‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®:** @Mojibrsm"
        bot.edit_message_text(help_text, message.chat.id, message.message_id, reply_markup=back_to_main_menu_keyboard(), parse_mode="Markdown")
    elif action == "get_referral":
        bot_info = bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start={user_id}"
        referral_text = f"**üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï**\n\n‡¶è‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶ø **‡ß©‡¶ü‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ SMS** ‡¶™‡¶æ‡¶¨‡ßá‡¶®!\n\n`{referral_link}`\n\n_(‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶ü‡¶ø ‡¶ï‡¶™‡¶ø ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§)_"
        bot.edit_message_text(referral_text, message.chat.id, message.message_id, parse_mode="Markdown", reply_markup=back_to_main_menu_keyboard())
    elif action == "send_message_start":
        cursor.execute("UPDATE users SET current_action = 'awaiting_number' WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.edit_message_text("‡¶¨‡ßá‡¶∂! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§", message.chat.id, message.message_id, reply_markup=back_to_main_menu_keyboard())
    elif action == "admin_menu":
        if not is_admin(user_id): return
        bot.edit_message_text("üîë **‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤**", message.chat.id, message.message_id, reply_markup=admin_menu_keyboard(), parse_mode="Markdown")
    elif action.startswith("userlist_page_"):
        if not is_admin(user_id): return
        page = int(action.split('_')[2])
        per_page = 10
        offset = (page - 1) * per_page
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        total_pages = (total_users + per_page - 1) // per_page or 1
        cursor.execute("SELECT user_id, first_name, username FROM users ORDER BY user_id DESC LIMIT ? OFFSET ?", (per_page, offset))
        users_on_page = cursor.fetchall()
        userlist_text = f"üë• **‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ** (‡¶™‡ßá‡¶ú: {page}/{total_pages})\n\n"
        if not users_on_page:
            userlist_text += "‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§"
        else:
            for user in users_on_page:
                uid, fname, uname = user
                cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (uid,))
                sms_count = cursor.fetchone()[0]
                userlist_text += f"üë§ **{fname}** (@{uname})\n   - ‡¶Ü‡¶á‡¶°‡¶ø: `{uid}`\n   - ‡¶Æ‡ßã‡¶ü SMS: **{sms_count}**\n---\n"
        row = []
        keyboard = types.InlineKeyboardMarkup()
        if page > 1: row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è ‡¶Ü‡¶ó‡ßá‡¶∞", callback_data=f"userlist_page_{page-1}"))
        if page < total_pages: row.append(types.InlineKeyboardButton("‡¶™‡¶∞‡ßá‡¶∞ ‚û°Ô∏è", callback_data=f"userlist_page_{page+1}"))
        keyboard.add(*row)
        keyboard.add(types.InlineKeyboardButton("üîô ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="admin_menu"))
        bot.edit_message_text(userlist_text, call.message.chat.id, message.message_id, reply_markup=keyboard, parse_mode="Markdown")
    elif action == "show_stats" or action == "refresh_stats":
        if not is_admin(user_id): return
        cursor.execute("SELECT COUNT(*) FROM users"); total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM sms_log"); total_sms = cursor.fetchone()[0]
        today = str(datetime.date.today()); cursor.execute("SELECT COUNT(*) FROM sms_log WHERE DATE(timestamp) = ?", (today,)); today_sms = cursor.fetchone()[0]
        stats_text = f"üìä **‡¶¨‡¶ü ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®**\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: {total_users}\nüì§ ‡¶Æ‡ßã‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã SMS: {total_sms}\nüìà ‡¶Ü‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã SMS: {today_sms}"
        keyboard = types.InlineKeyboardMarkup(); keyboard.add(types.InlineKeyboardButton("üîÑ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂", callback_data="refresh_stats")); keyboard.add(types.InlineKeyboardButton("üîô ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data="admin_menu"))
        try: bot.edit_message_text(stats_text, call.message.chat.id, message.message_id, reply_markup=keyboard, parse_mode="Markdown")
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" not in str(e): raise e
            else: bot.answer_callback_query(call.id, "Stats up-to-date.")
    elif action == "get_backup":
        if not is_admin(user_id): return
        try:
            with open('sms_bot.db', 'rb') as db_file: bot.send_document(call.message.chat.id, db_file, caption="‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™")
            bot.answer_callback_query(call.id, "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        except Exception as e: bot.answer_callback_query(call.id, f"‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}", show_alert=True)
    elif action == "prompt_set_bonus":
        if not is_admin(user_id): return
        cursor.execute("UPDATE users SET temp_admin_action = 'set_bonus' WHERE user_id = ?", (user_id,)); conn.commit()
        bot.send_message(call.message.chat.id, "‡¶Ø‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶¶‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶§‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡¶ø‡¶®‡•§\n‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: `USER_ID AMOUNT`\n‡¶Ø‡ßá‡¶Æ‡¶®: `12345678 50`", parse_mode="Markdown")
    elif action == "prompt_user_sms":
        if not is_admin(user_id): return
        cursor.execute("UPDATE users SET temp_admin_action = 'get_user_sms' WHERE user_id = ?", (user_id,)); conn.commit()
        bot.send_message(call.message.chat.id, "‡¶Ø‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≤‡¶ó ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶§‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§\n‡¶Ø‡ßá‡¶Æ‡¶®: `12345678`")

# --- Flask Webhook Setup ---
@app.route('/' + BOT_TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8'); update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update]); return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook(); bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
    return "Webhook has been set successfully!", 200

if __name__ == "__main__":
    setup_database()
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
