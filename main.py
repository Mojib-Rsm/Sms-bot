import telebot
import sqlite3
import datetime
import requests
import os
import sys
from flask import Flask, request
from telebot import types

# --- Environment Variables ржерзЗржХрзЗ рждржерзНржп рж▓рзЛржб ржХрж░рж╛ ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS")
SMS_API_URL = os.environ.get("SMS_API_URL")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# --- ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рж╛ ---
if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_IDS_STR, SMS_API_URL, WEBHOOK_URL]):
    print("FATAL ERROR: A required variable was not found in Railway's 'Variables' tab.", file=sys.stderr)
    raise ValueError("Error: One or more required environment variables are not set in Railway.")

ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',')]

# --- ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзЗржЯржЖржк ---
conn = sqlite3.connect('sms_bot.db', check_same_thread=False)
cursor = conn.cursor()

def setup_database():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY, sms_sent INTEGER DEFAULT 0,
        last_sms_date TEXT, bonus_sms INTEGER DEFAULT 0,
        temp_admin_action TEXT
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sms_log (
        log_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER,
        phone_number TEXT, message TEXT, timestamp TEXT
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS drafts (
        draft_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER,
        phone_number TEXT, message TEXT, created_at TEXT
    )''')
    conn.commit()

setup_database()
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- рж╕рж╣рж╛рзЯржХ ржлрж╛ржВрж╢ржи ---
def is_admin(user_id):
    return user_id in ADMIN_IDS

def is_channel_member(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

# --- ржбрж╛ржЗржирж╛ржорж┐ржХ ржХржорж╛ржирзНржб ржорзЗржирзБ рж╕рзЗржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
def set_user_commands(user_id):
    user_commands = [
        types.BotCommand("start", "тЦ╢я╕П ржмржЯ ржЪрж╛рж▓рзБ/рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рзБржи"),
        types.BotCommand("sms", "ЁЯТм <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ> - SMS ржкрж╛ржарж╛ржи"),
        types.BotCommand("profile", "ЁЯСд ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржУ ржмрзНржпрж╛рж▓рзЗржирзНрж╕"),
        types.BotCommand("history", "ЁЯУЬ ржЖржкржирж╛рж░ ржкрж╛ржарж╛ржирзЛ SMS-ржПрж░ рж▓ржЧ"),
        types.BotCommand("referral", "ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ"),
        types.BotCommand("resend", "ЁЯФБ рж╢рзЗрж╖ ржорзЗрж╕рзЗржЬржЯрж┐ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржи"),
        types.BotCommand("draft", "ЁЯУЭ <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ> - ржорзЗрж╕рзЗржЬ ржбрзНрж░рж╛ржлржЯ ржХрж░рзБржи"),
        types.BotCommand("drafts", "ЁЯЧТя╕П ржЖржкржирж╛рж░ рж╕ржм ржбрзНрж░рж╛ржлржЯ ржжрзЗржЦрзБржи"),
        types.BotCommand("help", "тЭУ рж╕ржХрж▓ ржХржорж╛ржирзНржбрзЗрж░ рждрж╛рж▓рж┐ржХрж╛")
    ]
    
    if is_admin(user_id):
        admin_commands = [
            types.BotCommand("admin", "ЁЯФС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ ржжрзЗржЦрзБржи"),
            types.BotCommand("stats", "ЁЯУК ржмржЯрзЗрж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрзБржи")
        ]
        user_commands.extend(admin_commands)
    
    bot.set_my_commands(commands=user_commands, scope=types.BotCommandScopeChat(user_id))

# --- ржмрж╛ржЯржи (Keyboard) рждрзИрж░рж┐рж░ ржлрж╛ржВрж╢ржи ---
def main_menu_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("ЁЯСд ржЖржорж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓", callback_data="show_profile")
    btn2 = types.InlineKeyboardButton("ЁЯУЬ ржЖржорж╛рж░ History", callback_data="history_page_1")
    btn3 = types.InlineKeyboardButton("ЁЯУЭ ржбрзНрж░рж╛ржлржЯ ржорзЗрж╕рзЗржЬ", callback_data="show_drafts_page_1")
    btn4 = types.InlineKeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ", callback_data="get_referral")
    btn5 = types.InlineKeyboardButton("тЭУ рж╕рж╣рж╛рзЯрждрж╛", callback_data="show_help")
    keyboard.add(btn1, btn2, btn3, btn4, btn5)
    if is_admin(user_id):
        btn6 = types.InlineKeyboardButton("ЁЯФС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓", callback_data="admin_menu")
        keyboard.add(btn6)
    return keyboard

def force_join_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    try:
        channel_link = bot.export_chat_invite_link(CHANNEL_ID)
        url_button = types.InlineKeyboardButton(text="тЮбя╕П ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи", url=channel_link)
    except Exception:
        url_button = types.InlineKeyboardButton(text="тЮбя╕П ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")
    keyboard.add(url_button)
    return keyboard
    
def admin_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("ЁЯУК ржмржЯ Stats", callback_data="show_stats")
    btn2 = types.InlineKeyboardButton("ЁЯТ╛ ржмрзНржпрж╛ржХржЖржк", callback_data="get_backup")
    btn3 = types.InlineKeyboardButton("ЁЯОБ ржмрзЛржирж╛рж╕ ржжрж┐ржи", callback_data="prompt_set_bonus")
    btn4 = types.InlineKeyboardButton("ЁЯЧТя╕П ржЗржЙржЬрж╛рж░рзЗрж░ рж▓ржЧ", callback_data="prompt_user_sms")
    btn5 = types.InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")
    keyboard.add(btn1, btn2, btn3, btn4, btn5)
    return keyboard

# --- ржорзВрж▓ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    set_user_commands(user_id)

    if not is_channel_member(user_id):
        bot.send_message(message.chat.id, "рд╕реНрд╡рд╛рдЧрддрдореН!\n\nржПржЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржжрж╕рзНржп рж╣рждрзЗ рж╣ржмрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи ржПржмржВ рждрж╛рж░ржкрж░ ржЖржмрж╛рж░ /start ржХржорж╛ржирзНржб ржжрж┐ржиред", reply_markup=force_join_keyboard())
        return

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, last_sms_date) VALUES (?, ?)", (user_id, str(datetime.date.today())))
        conn.commit()

    parts = message.text.split()
    if len(parts) > 1:
        try:
            referrer_id = int(parts[1])
            if referrer_id != user_id:
                cursor.execute("UPDATE users SET bonus_sms = bonus_sms + 3 WHERE user_id = ?", (referrer_id,))
                conn.commit()
                bot.send_message(referrer_id, "ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХрзЗ ржПржХржЬржи ржирждрзБржи рж╕ржжрж╕рзНржп ржпрзЛржЧ ржжрж┐рзЯрзЗржЫрзЗржиред ржЖржкржирж┐ рзйржЯрж┐ ржмрзЛржирж╛рж╕ SMS ржкрзЗрзЯрзЗржЫрзЗржиред")
        except (IndexError, ValueError):
            pass

    welcome_text = "рж╕рзНржмрж╛ржЧрждржо! ЁЯОЙ\n\nржЖржкржирж┐ ржПржЦржи ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред"
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu_keyboard(user_id))

@bot.message_handler(commands=['sms'])
def sms_command(message):
    user_id = message.from_user.id
    if not is_channel_member(user_id):
        bot.reply_to(message, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред", reply_markup=force_join_keyboard())
        return

    try:
        _, phone_number, sms_text = message.text.split(maxsplit=2)
    except ValueError:
        bot.reply_to(message, "тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред\nрж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: `/sms <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>`")
        return

    cursor.execute("SELECT sms_sent, last_sms_date, bonus_sms FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    today = str(datetime.date.today())
    
    if not user_data:
        cursor.execute("INSERT INTO users (user_id, last_sms_date) VALUES (?, ?)", (user_id, today))
        conn.commit()
        sms_sent, bonus_sms = 0, 0
    else:
        if user_data[1] != today:
            cursor.execute("UPDATE users SET sms_sent = 0, last_sms_date = ? WHERE user_id = ?", (today, user_id))
            conn.commit()
            sms_sent = 0
        else:
            sms_sent = user_data[0]
        bonus_sms = user_data[2]
    
    total_limit = 10 + bonus_sms
    if sms_sent >= total_limit:
        bot.reply_to(message, f"ржЖржкржирж┐ ржЖржкржирж╛рж░ ржжрзИржирж┐ржХ SMS ржкрж╛ржарж╛ржирзЛрж░ рж╕рзАржорж╛ ({total_limit} ржЯрж┐) ржЕрждрж┐ржХрзНрж░ржо ржХрж░рзЗржЫрзЗржиред")
        return

    cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ? AND phone_number = ? AND DATE(timestamp) = ?", (user_id, phone_number, today))
    same_number_count = cursor.fetchone()[0]
    if same_number_count >= 4:
        bot.reply_to(message, "ржЖржкржирж┐ ржПржЗ ржиржорзНржмрж░рзЗ ржжрж┐ржирзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рзкржЯрж┐ SMS ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░ржмрзЗржиред")
        return

    try:
        response = requests.get(SMS_API_URL, params={'number': phone_number, 'sms': sms_text})
        if response.status_code == 200:
            cursor.execute("UPDATE users SET sms_sent = sms_sent + 1 WHERE user_id = ?", (user_id,))
            cursor.execute("INSERT INTO sms_log (user_id, phone_number, message, timestamp) VALUES (?, ?, ?, ?)", (user_id, phone_number, sms_text, datetime.datetime.now().isoformat()))
            conn.commit()
            bot.reply_to(message, f"тЬЕ '{phone_number}' ржиржорзНржмрж░рзЗ ржЖржкржирж╛рж░ SMS рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржЕржирзБрж░рзЛржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        else:
            bot.reply_to(message, f"API ржерзЗржХрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржХрзЛржб: {response.status_code}")
    except requests.exceptions.RequestException:
        bot.reply_to(message, "API рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред")

@bot.message_handler(commands=['profile', 'balance'])
def profile_command(message):
    if not is_channel_member(message.from_user.id):
        bot.reply_to(message, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред", reply_markup=force_join_keyboard())
        return
    show_profile_info(message.chat.id, message.from_user.id, message.message_id)

def show_profile_info(chat_id, user_id, message_id=None):
    cursor.execute("SELECT sms_sent, last_sms_date, bonus_sms FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    
    sms_sent_today = 0
    if user_data and user_data[1] == str(datetime.date.today()):
        sms_sent_today = user_data[0]
    
    bonus_sms = user_data[2] if user_data else 0
    daily_limit = 10
    remaining_sms = (daily_limit - sms_sent_today) + bonus_sms

    cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (user_id,))
    total_sent_ever = cursor.fetchone()[0]

    profile_text = f"ЁЯСд **ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓**\n\nЁЯФ╣ **ржжрзИржирж┐ржХ рж▓рж┐ржорж┐ржЯ:**\n   - ржмрзНржпржмрж╣рзГржд: {sms_sent_today} ржЯрж┐\n   - ржмрж╛ржХрж┐ ржЖржЫрзЗ: {daily_limit - sms_sent_today} ржЯрж┐\n\nЁЯФ╕ **ржмрзЛржирж╛рж╕:** {bonus_sms} ржЯрж┐ SMS\n\nтЬЕ **ржЖржЬ ржорзЛржЯ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░ржмрзЗржи:** {remaining_sms} ржЯрж┐\n\nЁЯУИ **рж▓рж╛ржЗржлржЯрж╛ржЗржо ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:**\n   - ржорзЛржЯ ржкрж╛ржарж╛ржирзЛ SMS: {total_sent_ever} ржЯрж┐"
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("ЁЯФД рж░рж┐ржлрзНрж░рзЗрж╢", callback_data="show_profile"))
    
    if message_id:
        bot.edit_message_text(profile_text, chat_id, message_id, parse_mode="Markdown", reply_markup=keyboard)
    else:
        bot.send_message(chat_id, profile_text, parse_mode="Markdown", reply_markup=keyboard)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = "ЁЯУЬ **ржмржЯ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛**\n\n**рж╕рж╛ржзрж╛рж░ржг ржХржорж╛ржирзНржб:**\n`/start` - ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржиред\n`/sms <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>` - SMS ржкрж╛ржарж╛ржиред\n`/profile` - ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржУ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрзБржиред\n`/history` - ржЖржкржирж╛рж░ ржкрж╛ржарж╛ржирзЛ SMS-ржПрж░ рж▓ржЧ ржжрзЗржЦрзБржиред\n`/referral` - ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ ржкрж╛ржиред\n`/resend` - ржЖржкржирж╛рж░ рж╢рзЗрж╖ ржкрж╛ржарж╛ржирзЛ SMSржЯрж┐ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржиред\n`/draft <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>` - ржПржХржЯрж┐ ржорзЗрж╕рзЗржЬ ржбрзНрж░рж╛ржлржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржиред\n`/drafts` - ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ рж╕ржм ржбрзНрж░рж╛ржлржЯ ржжрзЗржЦрзБржиред\n\nтД╣я╕П ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛рзЯ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
    bot.reply_to(message, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['resend'])
def resend_command(message):
    user_id = message.from_user.id
    if not is_channel_member(user_id):
        bot.reply_to(message, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред", reply_markup=force_join_keyboard())
        return
    
    cursor.execute("SELECT phone_number, message FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1", (user_id,))
    last_sms = cursor.fetchone()
    if last_sms:
        # ржПржЦрж╛ржирзЗ SMS ржкрж╛ржарж╛ржирзЛрж░ ржорзВрж▓ ржлрж╛ржВрж╢ржиржЯрж┐ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
        message.text = f"/sms {last_sms[0]} {last_sms[1]}"
        sms_command(message)
    else:
        bot.reply_to(message, "ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржкрзБрж░ржирзЛ ржорзЗрж╕рзЗржЬ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

@bot.message_handler(commands=['draft'])
def draft_command(message):
    user_id = message.from_user.id
    try:
        _, phone_number, sms_text = message.text.split(maxsplit=2)
        cursor.execute("INSERT INTO drafts (user_id, phone_number, message, created_at) VALUES (?, ?, ?, ?)", (user_id, phone_number, sms_text, datetime.datetime.now().isoformat()))
        conn.commit()
        bot.reply_to(message, "тЬЕ ржорзЗрж╕рзЗржЬржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрзНрж░рж╛ржлржЯрзЗ рж╕рзЗржн ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
    except ValueError:
        bot.reply_to(message, "тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред\nрж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: `/draft <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>`")


# --- рж╕рж╛ржзрж╛рж░ржг ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЕрзНржпрж╛ржбржорж┐ржи ржЗржиржкрзБржЯрзЗрж░ ржЬржирзНржп) ---
@bot.message_handler(func=lambda message: True)
def handle_admin_input(message):
    user_id = message.from_user.id
    cursor.execute("SELECT temp_admin_action FROM users WHERE user_id = ?", (user_id,))
    action_data = cursor.fetchone()

    if not action_data or not action_data[0]: return

    action_type = action_data[0]
    cursor.execute("UPDATE users SET temp_admin_action = NULL WHERE user_id = ?", (user_id,))
    conn.commit()

    if action_type == "set_bonus":
        try:
            target_user_id, bonus_amount = map(int, message.text.split())
            cursor.execute("UPDATE users SET bonus_sms = bonus_sms + ? WHERE user_id = ?", (bonus_amount, target_user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {target_user_id} ржХрзЗ {bonus_amount}ржЯрж┐ ржмрзЛржирж╛рж╕ SMS ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")
            bot.send_message(target_user_id, f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЕрзНржпрж╛ржбржорж┐ржи ржЖржкржирж╛ржХрзЗ {bonus_amount}ржЯрж┐ ржмрзЛржирж╛рж╕ SMS ржжрж┐рзЯрзЗржЫрзЗржиред")
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "тЭМ ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

    elif action_type == "get_user_sms":
        try:
            target_user_id = int(message.text)
            cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (target_user_id,))
            total_sms_sent = cursor.fetchone()[0]
            cursor.execute("SELECT phone_number, timestamp FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT 20", (target_user_id,))
            logs = cursor.fetchall()
            
            if not logs:
                bot.send_message(message.chat.id, f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {target_user_id} ржПрж░ ржХрзЛржирзЛ рж▓ржЧ ржирзЗржЗред")
                return

            log_text = f"ЁЯУЬ **ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {target_user_id} ржПрж░ SMS рж▓ржЧ:**\n\nЁЯУК **ржорзЛржЯ ржкрж╛ржарж╛ржирзЛ SMS:** {total_sms_sent} ржЯрж┐\n-------------------------------------\n\n"
            
            for log in logs:
                dt_obj = datetime.datetime.fromisoformat(log[1])
                formatted_time = dt_obj.strftime('%Y-%m-%d %H:%M')
                log_text += f"ЁЯУЮ **ржиржорзНржмрж░:** `{log[0]}`\nЁЯЧУя╕П **рж╕ржорзЯ:** {formatted_time}\n---\n"
            bot.send_message(message.chat.id, log_text, parse_mode="Markdown")
        except ValueError:
            bot.send_message(message.chat.id, "тЭМ ржнрзБрж▓ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ред рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")


# --- ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХрзЗрж░ ржЙрждрзНрждрж░ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    action = call.data

    if not is_channel_member(user_id):
        bot.answer_callback_query(call.id, "ржПржЗ рж╕рзБржмрж┐ржзрж╛ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред", show_alert=True)
        return

    if action == "main_menu":
        bot.edit_message_text("ржорзВрж▓ ржорзЗржирзБ:", call.message.chat.id, call.message.message_id, reply_markup=main_menu_keyboard(user_id))
    
    elif action == "show_profile":
        try:
            show_profile_info(call.message.chat.id, user_id, call.message.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                bot.answer_callback_query(call.id, "ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржк-ржЯрзБ-ржбрзЗржЯ ржЖржЫрзЗред")
            else: raise e
        bot.answer_callback_query(call.id)

    elif action == "get_referral":
        bot_info = bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start={user_id}"
        bot.answer_callback_query(call.id, text=f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n{referral_link}", show_alert=True)

    elif action.startswith("history_page_"):
        page = int(action.split('_')[2])
        per_page = 5
        offset = (page - 1) * per_page
        cursor.execute("SELECT phone_number, timestamp FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT ? OFFSET ?", (user_id, per_page, offset))
        logs = cursor.fetchall()
        cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (user_id,))
        total_logs = cursor.fetchone()[0]
        total_pages = (total_logs + per_page - 1) // per_page or 1
        
        if not logs:
            bot.answer_callback_query(call.id, "ржЖржкржирж╛рж░ ржХрзЛржирзЛ SMS ржкрж╛ржарж╛ржирзЛрж░ ржЗрждрж┐рж╣рж╛рж╕ ржирзЗржЗред", show_alert=True)
            return

        history_text = f"ЁЯУЬ **ржЖржкржирж╛рж░ SMS History** (ржкрзЗржЬ: {page}/{total_pages})\n\n"
        for log in logs:
            dt_obj = datetime.datetime.fromisoformat(log[1])
            history_text += f"ЁЯУЮ ржиржорзНржмрж░: `{log[0]}`\nЁЯЧУя╕П рж╕ржорзЯ: {dt_obj.strftime('%Y-%m-%d %H:%M')}\n---\n"
        
        row = []
        keyboard = types.InlineKeyboardMarkup()
        if page > 1: row.append(types.InlineKeyboardButton("тмЕя╕П ржЖржЧрзЗрж░", callback_data=f"history_page_{page-1}"))
        if page < total_pages: row.append(types.InlineKeyboardButton("ржкрж░рзЗрж░ тЮбя╕П", callback_data=f"history_page_{page+1}"))
        keyboard.add(*row)
        keyboard.add(types.InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu"))
        bot.edit_message_text(history_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
    
    # --- ржЕрзНржпрж╛ржбржорж┐ржи ржХрж▓ржмрзНржпрж╛ржХ ---
    elif action == "admin_menu":
        if not is_admin(user_id): return
        bot.edit_message_text("ЁЯФС **ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓**", call.message.chat.id, call.message.message_id, reply_markup=admin_menu_keyboard(), parse_mode="Markdown")

    elif action == "show_stats" or action == "refresh_stats":
        if not is_admin(user_id): return
        # ... (stats ржПрж░ ржХрзЛржб ржЖржЧрзЗрж░ ржорждрзЛржЗ) ...
    
    elif action == "get_backup":
        # ... (backup ржПрж░ ржХрзЛржб ржЖржЧрзЗрж░ ржорждрзЛржЗ) ...

    elif action == "prompt_set_bonus":
        # ... (prompt_set_bonus ржПрж░ ржХрзЛржб ржЖржЧрзЗрж░ ржорждрзЛржЗ) ...
        
    elif action == "prompt_user_sms":
        # ... (prompt_user_sms ржПрж░ ржХрзЛржб ржЖржЧрзЗрж░ ржорждрзЛржЗ) ...

# --- Flask Webhook рж╕рзЗржЯржЖржк ---
@app.route('/' + BOT_TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
    return "Webhook has been set successfully!", 200

if __name__ == "__main__":
    setup_database()
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
