import telebot
import sqlite3
import datetime
import requests
import os
import sys
from flask import Flask, request
from telebot import types

# --- Environment Variables ржерзЗржХрзЗ рждржерзНржп рж▓рзЛржб ржХрж░рж╛ ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS")
SMS_API_URL = os.environ.get("SMS_API_URL")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# --- ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рж╛ ---
if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_IDS_STR, SMS_API_URL, WEBHOOK_URL]):
    print("FATAL ERROR: A required variable was not found in Railway's 'Variables' tab.", file=sys.stderr)
    raise ValueError("Error: One or more required environment variables are not set in Railway.")

ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',')]

# --- ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзЗржЯржЖржк (ржирждрзБржи ржЯрзЗржмрж┐рж▓ ржУ ржХрж▓рж╛ржо рж╕рж╣) ---
conn = sqlite3.connect('sms_bot.db', check_same_thread=False)
cursor = conn.cursor()

def setup_database():
    # ржЗржЙржЬрж╛рж░ ржЯрзЗржмрж┐рж▓
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY, sms_sent INTEGER DEFAULT 0,
        last_sms_date TEXT, bonus_sms INTEGER DEFAULT 0,
        temp_admin_action TEXT
    )''')
    # SMS рж▓ржЧ ржЯрзЗржмрж┐рж▓ (ржорзЗрж╕рзЗржЬ ржХржирзНржЯрзЗржирзНржЯ рж╕рж╣)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sms_log (
        log_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER,
        phone_number TEXT, message TEXT, timestamp TEXT
    )''')
    # ржбрзНрж░рж╛ржлржЯ ржорзЗрж╕рзЗржЬ ржЯрзЗржмрж┐рж▓ (ржирждрзБржи ржлрж┐ржЪрж╛рж░)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS drafts (
        draft_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER,
        phone_number TEXT, message TEXT, created_at TEXT
    )''')
    conn.commit()

setup_database()
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- рж╕рж╣рж╛рзЯржХ ржлрж╛ржВрж╢ржи ---
def is_admin(user_id):
    return user_id in ADMIN_IDS

def is_channel_member(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

# --- ржмрж╛ржЯржи (Keyboard) рждрзИрж░рж┐рж░ ржлрж╛ржВрж╢ржи ---
def main_menu_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("ЁЯСд ржЖржорж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓", callback_data="show_profile")
    btn2 = types.InlineKeyboardButton("ЁЯУЬ ржЖржорж╛рж░ History", callback_data="history_page_1")
    btn3 = types.InlineKeyboardButton("ЁЯУЭ ржбрзНрж░рж╛ржлржЯ ржорзЗрж╕рзЗржЬ", callback_data="show_drafts")
    btn4 = types.InlineKeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ", callback_data="get_referral")
    btn5 = types.InlineKeyboardButton("тЭУ рж╕рж╣рж╛рзЯрждрж╛", callback_data="show_help")
    keyboard.add(btn1, btn2, btn3, btn4, btn5)
    if is_admin(user_id):
        btn6 = types.InlineKeyboardButton("ЁЯФС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓", callback_data="admin_menu")
        keyboard.add(btn6)
    return keyboard

def force_join_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    # ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж▓рж┐ржВржХ ржПржЦрж╛ржирзЗ ржжрж┐ржи
    url_button = types.InlineKeyboardButton(text="тЮбя╕П ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")
    keyboard.add(url_button)
    return keyboard

# (ржмрж╛ржХрж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж┐ржмрзЛрж░рзНржб ржХрзЛржбржЧрзБрж▓рзЛ ржЖржЧрзЗрж░ ржорждрзЛржЗ ржерж╛ржХржмрзЗ)
def admin_menu_keyboard():
    # ... ржЖржЧрзЗрж░ ржорждрзЛржЗ ...

# --- ржорзВрж▓ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id

    if not is_channel_member(user_id):
        bot.send_message(message.chat.id, 
                         "рд╕реНрд╡рд╛рдЧрддрдореН!\n\nржПржЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржжрж╕рзНржп рж╣рждрзЗ рж╣ржмрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи ржПржмржВ рждрж╛рж░ржкрж░ ржЖржмрж╛рж░ /start ржХржорж╛ржирзНржб ржжрж┐ржиред", 
                         reply_markup=force_join_keyboard())
        return

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, last_sms_date) VALUES (?, ?)", (user_id, str(datetime.date.today())))
        conn.commit()

    # рж░рзЗржлрж╛рж░рзЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    # ... ржЖржЧрзЗрж░ ржорждрзЛржЗ ...
    
    welcome_text = "рж╕рзНржмрж╛ржЧрждржо! ЁЯОЙ\n\nржЖржкржирж┐ ржПржЦржи ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред"
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu_keyboard(user_id))

@bot.message_handler(commands=['sms'])
def sms_command(message):
    # ... ржЖржЧрзЗрж░ ржорждрзЛржЗ рж╕ржорзНржкрзВрж░рзНржг ржХрзЛржб ...
    # рж╢рзБржзрзБ sms_log ржП message ржХржирзНржЯрзЗржирзНржЯ рж╕рзЗржн ржХрж░рждрзЗ рж╣ржмрзЗ
    # cursor.execute("INSERT INTO sms_log ... VALUES (?, ?, ?, ?)", (user_id, phone_number, sms_text, ...))

@bot.message_handler(commands=['profile', 'balance'])
def profile_command(message):
    if not is_channel_member(message.from_user.id):
        bot.reply_to(message, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред", reply_markup=force_join_keyboard())
        return
    show_profile_info(message.chat.id, message.from_user.id)

def show_profile_info(chat_id, user_id):
    cursor.execute("SELECT sms_sent, last_sms_date, bonus_sms FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    
    sms_sent_today = 0
    if user_data and user_data[1] == str(datetime.date.today()):
        sms_sent_today = user_data[0]
    
    bonus_sms = user_data[2] if user_data else 0
    daily_limit = 10
    remaining_sms = (daily_limit - sms_sent_today) + bonus_sms

    cursor.execute("SELECT COUNT(*) FROM sms_log WHERE user_id = ?", (user_id,))
    total_sent_ever = cursor.fetchone()[0]

    profile_text = (
        f"ЁЯСд **ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓**\n\n"
        f"ЁЯФ╣ **ржжрзИржирж┐ржХ рж▓рж┐ржорж┐ржЯ:**\n"
        f"   - ржмрзНржпржмрж╣рзГржд: {sms_sent_today} ржЯрж┐\n"
        f"   - ржмрж╛ржХрж┐ ржЖржЫрзЗ: {daily_limit - sms_sent_today} ржЯрж┐\n\n"
        f"ЁЯФ╕ **ржмрзЛржирж╛рж╕:** {bonus_sms} ржЯрж┐ SMS\n\n"
        f"тЬЕ **ржЖржЬ ржорзЛржЯ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░ржмрзЗржи:** {remaining_sms} ржЯрж┐\n\n"
        f"ЁЯУИ **рж▓рж╛ржЗржлржЯрж╛ржЗржо ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:**\n"
        f"   - ржорзЛржЯ ржкрж╛ржарж╛ржирзЛ SMS: {total_sent_ever} ржЯрж┐"
    )
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("ЁЯФД рж░рж┐ржлрзНрж░рзЗрж╢", callback_data="show_profile"))
    bot.send_message(chat_id, profile_text, parse_mode="Markdown", reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "**ЁЯУЬ ржмржЯ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛**\n\n"
        "**рж╕рж╛ржзрж╛рж░ржг ржХржорж╛ржирзНржб:**\n"
        "`/start` - ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржиред\n"
        "`/sms <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>` - SMS ржкрж╛ржарж╛ржиред\n"
        "`/profile` - ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржУ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрзБржиред\n"
        "`/history` - ржЖржкржирж╛рж░ ржкрж╛ржарж╛ржирзЛ SMS-ржПрж░ рж▓ржЧ ржжрзЗржЦрзБржиред\n"
        "`/referral` - ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ ржкрж╛ржиред\n"
        "`/resend` - ржЖржкржирж╛рж░ рж╢рзЗрж╖ ржкрж╛ржарж╛ржирзЛ SMSржЯрж┐ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржиред\n"
        "`/draft <ржиржорзНржмрж░> <ржорзЗрж╕рзЗржЬ>` - ржПржХржЯрж┐ ржорзЗрж╕рзЗржЬ ржбрзНрж░рж╛ржлржЯ ржХрж░рзЗ рж░рж╛ржЦрзБржиред\n"
        "`/drafts` - ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ рж╕ржм ржбрзНрж░рж╛ржлржЯ ржжрзЗржЦрзБржиред\n"
        "`/schedule` - SMS рж╢рж┐ржбрж┐ржЙрж▓ ржХрж░рзБржи (рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ)ред\n\n"
        "тД╣я╕П ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛рзЯ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['resend'])
def resend_command(message):
    # рж░рж┐рж╕рзЗржирзНржб ржХрж░рж╛рж░ рж▓ржЬрж┐ржХ ржПржЦрж╛ржирзЗ ржпрзБржХрзНржд рж╣ржмрзЗ
    user_id = message.from_user.id
    cursor.execute("SELECT phone_number, message FROM sms_log WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1", (user_id,))
    last_sms = cursor.fetchone()
    if last_sms:
        # ржПржЦрж╛ржирзЗ SMS ржкрж╛ржарж╛ржирзЛрж░ ржорзВрж▓ ржлрж╛ржВрж╢ржиржЯрж┐ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
        # рж▓рж┐ржорж┐ржЯ ржЪрзЗржХ рж╕рж╣
        bot.reply_to(message, f"`{last_sms[0]}` ржиржорзНржмрж░рзЗ `{last_sms[1]}` ржорзЗрж╕рзЗржЬржЯрж┐ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржирзЛрж░ ржЕржирзБрж░рзЛржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    else:
        bot.reply_to(message, "ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржкрзБрж░ржирзЛ ржорзЗрж╕рзЗржЬ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")


# --- ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХрзЗрж░ ржЙрждрзНрждрж░ (Callback Query Handler) ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    action = call.data

    if not is_channel_member(user_id):
        bot.answer_callback_query(call.id, "ржПржЗ рж╕рзБржмрж┐ржзрж╛ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред", show_alert=True)
        return
    
    if action == "show_profile":
        show_profile_info(call.message.chat.id, user_id)
        bot.answer_callback_query(call.id) # ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ рж╣рзЯрзЗржЫрзЗ ржЬрж╛ржирж╛ржирзЛрж░ ржЬржирзНржп

    # ... ржЕржирзНржпрж╛ржирзНржп рж╕ржм callback handler ржЖржЧрзЗрж░ ржорждрзЛржЗ ржерж╛ржХржмрзЗ ...
    # ржпрзЗржоржи: history, admin_menu, show_stats ржЗрждрзНржпрж╛ржжрж┐ред


# --- Flask Webhook рж╕рзЗржЯржЖржк ---
# ... ржЖржЧрзЗрж░ ржорждрзЛржЗ рж╕ржорзНржкрзВрж░рзНржг ржХрзЛржб ...

if __name__ == "__main__":
    setup_database()
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
